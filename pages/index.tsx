import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { Grid, TextField, Typography, CircularProgress } from '@mui/material';
import LogoUFO from '../assets/images/logoUFO.png';
import pageNotFound from '../assets/images/pageNotFoundBanner.svg';
import { analytics } from '../services/sample';
import axios from 'axios';
import { ScanContext } from '../context/scan';
import { useState, useContext } from 'react';
import { vulnerabilitiesData } from '../services/sample';
import { MainInfo } from '../components/MainInfo';
import { Vulnerability } from '../services/models/analytics';
interface IMsg {
    user: string;
    url: string;
    port: string;
}

const user = 'user_' + String(new Date().getTime()).substr(-3);

const Home: NextPage = () => {
    const { scanData, setScanData } = useContext(ScanContext);
    const [loading, setLoading] = useState(false);
    const [port, setPort] = useState<string>('');
    const [url, setUrl] = useState<string>('');
    const [isError, setIsError] = useState<boolean>(false);

    const filterVulnerabilities = (vuln: Vulnerability[]) => {
        return vuln.filter(v => v.type === 'cve' || v.type === 'zdt');
    };

    const sendMessage = async () => {
        if (url) {
            const message: IMsg = { user, url, port };
            setLoading(true);
            axios
                .post<Vulnerability[]>('/api/url', message)
                .then(function (response) {
                    setScanData(filterVulnerabilities(response.data));
                    setIsError(false);
                    setLoading(false);
                })
                .catch(function (error) {
                    console.log(error);
                    setIsError(true);
                });
        }
    };

    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
                <link
                    rel="stylesheet"
                    href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
                />
                <link
                    rel="stylesheet"
                    href="https://fonts.googleapis.com/icon?family=Material+Icons"
                />
                <link rel="preconnect" href="https://fonts.googleapis.com" />
                <link rel="preconnect" href="https://fonts.gstatic.com" />
                <link
                    href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;700&display=swap"
                    rel="stylesheet"
                />
                <link
                    href="https://fonts.googleapis.com/css2?family=Schoolbell&display=swap"
                    rel="stylesheet"
                />
            </Head>

            <main
                className={styles.main}
                style={{
                    width: '100vw',
                    padding: 50,
                    justifyItems: 'flex-start',
                }}
            >
                <Grid container justifyContent="center" spacing={2}>
                    <Grid item component={Image} src={LogoUFO} />
                    <Grid
                        item
                        component={Typography}
                        variant="h1"
                        className={'title'}
                    >
                        Ufo Detector
                    </Grid>
                    <Grid
                        item
                        md={12}
                        component={Typography}
                        variant="h3"
                        className={'subtitle'}
                        // style={{ fontFamily: 'Schoolbell Regular' }}
                    >
                        Detect Vulnerabilities in your website
                    </Grid>
                </Grid>
                <Grid
                    container
                    style={{
                        margin: '20 10',
                        paddingTop: '2rem',
                        paddingLeft: '6rem',
                        paddingRight: '6rem',
                    }}
                >
                    <Grid md={6}>
                        <TextField
                            variant="standard"
                            className={'url'}
                            fullWidth
                            value={url}
                            onChange={event => setUrl(event.target.value)}
                            label="URL"
                        />
                    </Grid>
                    <Grid md={1} />
                    <Grid md={3}>
                        <TextField
                            variant="standard"
                            className={'port'}
                            fullWidth
                            value={port}
                            onChange={event => setPort(event.target.value)}
                            label="PORT"
                        />
                    </Grid>
                    <Grid style={{ padding: '0 12px' }} md={2}>
                        <button
                            className={'lined thick'}
                            onClick={() => {
                                sendMessage();
                            }}
                        >
                            GO
                        </button>
                    </Grid>

                    {loading ? (
                        <CircularProgress
                            style={{
                                position: 'fixed',
                                top: '70%',
                                left: '50%',
                            }}
                        />
                    ) : null}
                    <Grid
                        className={'description'}
                        container
                        component={Typography}
                    >
                        {isError ? (
                            <Image
                                alt="Imagem de erro"
                                width={145}
                                height={145}
                                className="image"
                                src={pageNotFound}
                            />
                        ) : scanData.length === 0 ? (
                            <Typography
                                style={{
                                    paddingTop: '8rem',
                                    fontSize: '1.2rem',
                                }}
                            >
                                The objective of this work is to develop a
                                Network Vulnerability Test (NVT) used to scan
                                endpoints to identify and detect vulnerabilities
                                that measure and return a cybersecurity
                                assessment to know the degree of maturity in
                                terms of information protection and make sure
                                that it is in line with its OWASP (Open Web
                                Application Security Project) and other
                                regulatory requirements.
                            </Typography>
                        ) : (
                            <MainInfo vulnerabilities={scanData} />
                        )}
                    </Grid>
                </Grid>
            </main>
        </div>
    );
};

export default Home;
